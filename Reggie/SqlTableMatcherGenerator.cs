using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
namespace Reggie {
    internal partial class SqlTableMatcherGenerator {
        public static void Run(TextWriter Response, IDictionary<string, object> Arguments) {

var rules = (IList<LexRule>)Arguments["rules"];
var ignoreCase = (bool)Arguments["ignorecase"];
var inputFile = (string)Arguments["inputfile"];
var outputFile = (string)Arguments["outputfile"];
var codeclass = (string)Arguments["codeclass"];
var codenamespace = (string)Arguments["codenamespace"];
var stderr = (TextWriter)Arguments["stderr"];
var dot = (bool)Arguments["dot"];
var jpg = (bool)Arguments["jpg"];
var cwd = Path.GetDirectoryName(outputFile!=null?outputFile:inputFile);
Run("SqlTableMatcherCreateGenerator",Arguments,Response,0);
for(var k=0;k<2;++k) {
var istext = k==1;
            Response.Write("\r\nDROP PROCEDURE [dbo].[");
            Response.Write(codeclass);
            Response.Write("_");
            Response.Write(istext?"Text":"");
            Response.Write("Is]\r\nGO\r\nCREATE PROCEDURE [dbo].[");
            Response.Write(codeclass);
            Response.Write("_");
            Response.Write(istext?"Text":"");
            Response.Write("Is] @value ");
            Response.Write(istext?"NTEXT":"NVARCHAR(MAX)");
            Response.Write(", @symbolId INT\r\nAS\r\nBEGIN\r\n\tDECLARE @valueEnd INT = DATALENGTH(@value)/2+1\r\n\tDECLARE @index INT = 1\r\n\tDECLARE @ch BIGINT\r\n\tDECLARE @tch BIGINT\r\n\tDECLARE @state INT = 0\r\n\tDECLARE @toState INT = -1\r\n\tDECLARE @accept INT = -1\r\n\tDECLARE @blockEndId INT\r\n\tDECLARE @result INT = 0\r\n\tWHILE @index < @valueEnd\r\n\tBEGIN\r\n\t\tSET @ch = UNICODE(SUBSTRING(@value,@index,1))\r\n\t\tSET @tch = @ch - 0xd800\r\n\t\tIF @tch < 0 SET @tch = @tch + 2147483648\r\n\t\tIF @tch < 2048\r\n\t\tBEGIN\r\n\t\t\tSET @ch = @ch * 1024\r\n\t\t\tSET @index = @index + 1\r\n\t\t\tIF @index >= @valueEnd RETURN -1\r\n\t\t\tSET @ch = @ch + UNICODE(SUBSTRING(@value,@index,1)) - 0x35fdc00\r\n\t\tEND\r\n\t\tSET @toState = -1\r\n\t\tSELECT @toState = [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[ToStateId] FROM [dbo].[");
            Response.Write(codeclass);
            Response.Write("State] INNER JOIN [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition] ON [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[StateId]=[dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[StateId] AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId]=[dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[SymbolId] AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[BlockEndId]=-1 WHERE [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId]=@symbolId AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[StateId]=@state AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[BlockEndId] = -1 AND @ch BETWEEN [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[Min] AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[Max] \r\n\t\tIF @toState <> -1\r\n\t\tBEGIN\r\n\t\t\tSET @state = @toState;\r\n\t\t\tSET @index = @index + 1\r\n\t\tEND\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tBREAK\r\n\t\tEND\r\n\tEND\r\n\tSET @accept = -1\r\n\tSELECT @accept = [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId] FROM [dbo].[");
            Response.Write(codeclass);
            Response.Write("State] WHERE [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId] = @symbolId AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[StateId] = @state AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[BlockEndId] = -1 AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[Accepts]=1\r\n\tIF @accept <> -1 \r\n\tBEGIN\r\n\t\tSELECT TOP 1 @blockEndId = [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[BlockEndId] FROM [dbo].[");
            Response.Write(codeclass);
            Response.Write("State] WHERE [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId]=@symbolId AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[BlockEndId] <> -1\r\n\t\tIF @blockEndId <> -1 \r\n\t\tBEGIN\r\n\t\t\tSET @result = 0\r\n\t\t\tSET @state = 0\r\n\t\t\tWHILE @index < @valueEnd\r\n\t\t\tBEGIN\r\n\t\t\t\tSET @toState = -1\r\n\t\t\t\tSELECT @toState = [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[ToStateId] FROM [dbo].[");
            Response.Write(codeclass);
            Response.Write("State] INNER JOIN [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition] ON [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[StateId]=[dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[StateId] AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId]=[dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[SymbolId] AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[BlockEndId]=@blockEndId WHERE [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId]=@symbolId AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[StateId]=@state AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[BlockEndId] = @blockEndId AND @ch BETWEEN [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[Min] AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[Max] \r\n\t\t\t\tIF @toState <> -1\r\n\t\t\t\tBEGIN\r\n\t\t\t\t\tSET @state = @toState\r\n\t\t\t\t\tSET @index = @index + 1\r\n\t\t\t\tEND\t\r\n\t\t\t\tELSE\r\n\t\t\t\tBEGIN\r\n\t\t\t\t\tSET @accept = -1\r\n\t\t\t\t\tSELECT @accept = [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId] FROM [dbo].[");
            Response.Write(codeclass);
            Response.Write("State] WHERE [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId] = @symbolId AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[StateId] = @state AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[BlockEndId] = @blockEndId AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[Accepts]=1\r\n\t\t\t\t\tIF @accept = -1 \r\n\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\tIF @state = 0 SET @index = @index + 1\r\n\t\t\t\t\t\tSET @state = 0\r\n\t\t\t\t\tEND\r\n\t\t\t\t\tELSE\r\n\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\tSET @result = 0\r\n\t\t\t\t\t\tRETURN @result\r\n\t\t\t\t\tEND\t\t\r\n\t\t\t\tEND\r\n\t\t\t\tSET @ch = UNICODE(SUBSTRING(@value,@index,1))\r\n\t\t\t\tSET @tch = @ch - 0xd800\r\n\t\t\t\tIF @tch < 0 SET @tch = @tch + 2147483648\r\n\t\t\t\tIF @tch < 2048\r\n\t\t\t\tBEGIN\r\n\t\t\t\t\tSET @ch = @ch * 1024\r\n\t\t\t\t\tSET @index = @index + 1\r\n\t\t\t\t\tIF @index >= @valueEnd RETURN -1\r\n\t\t\t\t\tSET @ch = @ch + UNICODE(SUBSTRING(@value,@index,1)) - 0x35fdc00\r\n\t\t\t\tEND\r\n\t\t\tEND\r\n\t\t\tSET @accept = -1\r\n\t\t\tSELECT @accept = [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId] FROM [dbo].[");
            Response.Write(codeclass);
            Response.Write("State] WHERE [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId] = @symbolId AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[StateId] = @state AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[BlockEndId] = @blockEndId AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[Accepts]=1\r\n\t\t\tIF @accept <> -1 SET @result = 1 ELSE SET @result = 0\r\n\t\tEND\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tIF @index = @valueEnd SET @result = 1 ELSE SET @result = 0\r\n\t\tEND\r\n\tEND\r\n\tELSE\r\n\tBEGIN\r\n\t\tSET @result = 0\r\n\tEND\r\n\tRETURN @result\r\nEND\r\nGO\r\nDROP PROCEDURE [dbo].[");
            Response.Write(codeclass);
            Response.Write("_");
            Response.Write(istext?"Text":"");
            Response.Write("Match]\r\nGO\r\nCREATE PROCEDURE [dbo].[");
            Response.Write(codeclass);
            Response.Write("_");
            Response.Write(istext?"Text":"");
            Response.Write("Match] @value ");
            Response.Write(istext?"NTEXT":"NVARCHAR(MAX)");
            Response.Write(", @symbolId INT, @position BIGINT = 0\r\nAS\r\nBEGIN\r\n\tDECLARE @valueEnd INT = DATALENGTH(@value)/2+1\r\n\tDECLARE @index INT = 1\r\n\tDECLARE @ch BIGINT\r\n\tDECLARE @ch1 NCHAR\r\n\tDECLARE @ch2 NCHAR\r\n\tDECLARE @tch BIGINT\r\n\tDECLARE @state INT = 0\r\n\tDECLARE @toState INT = -1\r\n\tDECLARE @accept INT = -1\r\n\tDECLARE @capture NVARCHAR(MAX)\r\n\tDECLARE @blockEndId INT\r\n\tDECLARE @cursorPos BIGINT = @position\r\n\tDECLARE @absoluteIndex INT\r\n\tDECLARE @result INT = 0\r\n\tDECLARE @len INT = 0\r\n\tDECLARE @done INT = 0\r\n\tCREATE TABLE #Results (\r\n    [AbsolutePosition]  BIGINT NOT NULL,\r\n\t[AbsoluteLength] INT NOT NULL,\r\n\t[Position] BIGINT NOT NULL,\r\n\t[Length] INT NOT NULL,\r\n    [Value] NVARCHAR(MAX) NOT NULL\r\n\t)\r\n\tIF @index >= @valueEnd\r\n\tBEGIN \r\n\t\tSET @ch = -1\r\n\tEND\r\n\tELSE\r\n\tBEGIN\r\n\t\tSET @ch1 = SUBSTRING(@value,@index,1)\r\n\t\tSET @ch = UNICODE(@ch1)\r\n\t\tSET @tch = @ch - 0xd800\r\n\t\tIF @tch < 0 SET @tch = @tch + 2147483648\r\n\t\tIF @tch < 2048\r\n\t\tBEGIN\r\n\t\t\tSET @ch = @ch * 1024\r\n\t\t\tSET @index = @index + 1\r\n\t\t\tIF @index >= @valueEnd RETURN -1\r\n\t\t\tSET @ch2");
            Response.Write(" = SUBSTRING(@value,@index,1);\r\n\t\t\tSET @ch = @ch + UNICODE(@ch2) - 0x35fdc00\r\n\t\tEND\r\n\tEND\r\n\tWHILE @ch <> -1\r\n\tBEGIN\r\n\t\tSET @capture = N\'\'\r\n\t\tSET @position = @cursorPos\r\n\t\tSET @absoluteIndex = @index -1\r\n\t\tSET @done = 0\r\n\t\tWHILE @done = 0\r\n\t\tBEGIN \r\n\t\t\tSET @done = 1\r\n\t\t\tSET @toState = -1\r\n\t\t\tSELECT @toState = [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[ToStateId] FROM [dbo].[");
            Response.Write(codeclass);
            Response.Write("State] INNER JOIN [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition] ON [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[StateId]=[dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[StateId] AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId]=[dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[SymbolId] AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[BlockEndId]=-1 WHERE [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId]=@symbolId AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[StateId]=@state AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[BlockEndId] = -1 AND @ch BETWEEN [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[Min] AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[Max] \r\n\t\t\tIF @toState <> -1\r\n\t\t\tBEGIN\r\n\t\t\t\tSET @done = 0\r\n\t\t\t\tSET @state = @toState;\r\n\t\t\t\tSET @capture = @capture + @ch1\r\n\t\t\t\tIF @tch < 2048 SET @capture = @capture + @ch2\r\n\t\t\t\tSET @index = @index + 1\r\n\t\t\t\tIF @index >= @valueEnd\r\n\t\t\t\tBEGIN\r\n\t\t\t\t\tSET @ch = -1\r\n\t\t\t\t\tSET @done = 1\r\n\t\t\t\tEND\r\n\t\t\t\tELSE\r\n\t\t\t\tBEGIN\r\n\t\t\t\t\tSET @ch1 = SUBSTRING(@value,@index,1)\r\n\t\t\t\t\tSET @ch = UNICODE(@ch1)\r\n\t\t\t\t\tSET @tch = @ch - 0xd800\r\n\t\t\t\t\tIF @tch < 0 SET @tch = @tch + 2147483648\r\n\t\t\t\t\tIF @tch < 2048\r\n\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\tSET @ch = @ch * 1024\r\n\t\t\t\t\t\tSET @index = @index + 1\r\n\t\t\t\t\t\tIF @index >= @valueEnd RETURN -1\r\n\t\t\t\t\t\tSET @ch2 = SUBSTRING(@value,@index,1);\r\n\t\t\t\t\t\tSET @ch = @ch + UNICODE(@ch2) - 0x35fdc00\r\n\t\t\t\t\tEND\r\n\t\t\t\t\tSET @cursorPos = @cursorPos+1\r\n\t\t\t\tEND\r\n\t\t\tEND\r\n\t\tEND\r\n\t\tSET @accept = -1\r\n\t\tSELECT @accept = [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId] FROM [dbo].[");
            Response.Write(codeclass);
            Response.Write("State] WHERE [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId] = @symbolId AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[StateId] = @state AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[BlockEndId] = -1 AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[Accepts]=1\r\n\t\tIF @accept <> -1 \r\n\t\tBEGIN\r\n\t\t\tSELECT TOP 1 @blockEndId = [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[BlockEndId] FROM [dbo].[");
            Response.Write(codeclass);
            Response.Write("State] WHERE [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId]=@symbolId AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[BlockEndId] <> -1\r\n\t\t\tIF @blockEndId <> -1 \r\n\t\t\tBEGIN\r\n\t\t\t\tSET @result = 0\r\n\t\t\t\tSET @state = 0\r\n\t\t\t\tWHILE @ch <> -1\r\n\t\t\t\tBEGIN\r\n\t\t\t\t\tSET @done = 0\r\n\t\t\t\t\tWHILE @done = 0\r\n\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\tSET @done = 1\r\n\t\t\t\t\t\tSET @toState = -1\r\n\t\t\t\t\t\tSELECT @toState = [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[ToStateId] FROM [dbo].[");
            Response.Write(codeclass);
            Response.Write("State] INNER JOIN [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition] ON [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[StateId]=[dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[StateId] AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId]=[dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[SymbolId] AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[BlockEndId]=@blockEndId WHERE [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId]=@symbolId AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[StateId]=@state AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[BlockEndId] = @blockEndId AND @ch BETWEEN [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[Min] AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition].[Max] \r\n\t\t\t\t\t\tIF @toState <> -1\r\n\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\tSET @done = 0\r\n\t\t\t\t\t\t\tSET @state = @toState\r\n\t\t\t\t\t\t\tSET @capture = @capture + @ch1\r\n\t\t\t\t\t\t\tIF @tch < 2048 SET @capture = @capture + @ch2\r\n\t\t\t\t\t\t\tSET @index = @index + 1\r\n\t\t\t\t\t\t\tIF @index >= @valueEnd \r\n\t\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\t\tSET @ch = -1\r\n\t\t\t\t\t\t\t\tSET @done = 1\r\n\t\t\t\t\t\t\tEND\r\n\t\t\t\t\t\t\tELSE\r\n\t\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\t\tSET @ch1 = SUBSTRING(@value,@index,1)\r\n\t\t\t\t\t\t\t\tSET @ch = UNICODE(@ch1)\r\n\t\t\t\t\t\t\t\tSET @tch = @ch - 0xd800\r\n\t\t\t\t\t\t\t\tIF @tch < 0 SET @tch = @tch + 2147483648\r\n\t\t\t\t\t\t\t\tIF @tch < 2048\r\n\t\t\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\t\t\tSET @ch = @ch * 1024\r\n\t\t\t\t\t\t\t\t\tSET @index = @index + 1\r\n\t\t\t\t\t\t\t\t\tIF @index >= @valueEnd RETURN -1\r\n\t\t\t\t\t\t\t\t\tSET @ch2 = SUBSTRING(@value,@index,1);\r\n\t\t\t\t\t\t\t\t\tSET @ch = @ch + UNICODE(@ch2) - 0x35fdc00\r\n\t\t\t\t\t\t\t\tEND\r\n\t\t\t\t\t\t\t\tSET @cursorPos = @cursorPos+1\r\n\t\t\t\t\t\t\tEND\r\n\t\t\t\t\t\tEND\t\r\n\t\t\t\t\tEND -- WHILE @done = 0\r\n\t\t\t\t\tSET @accept = -1\r\n\t\t\t\t\tSELECT @accept = [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId] FROM [dbo].[");
            Response.Write(codeclass);
            Response.Write("State] WHERE [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[SymbolId] = @symbolId AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[StateId] = @state AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[BlockEndId] = @blockEndId AND [dbo].[");
            Response.Write(codeclass);
            Response.Write("State].[Accepts]=1\r\n\t\t\t\t\tIF @accept <> -1 \r\n\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t-- HACK:\r\n\t\t\t\t\t\tIF @ch = -1 SET @cursorPos = @cursorPos + 1\r\n\t\t\t\t\t\tINSERT INTO #Results SELECT @absoluteIndex AS [AbsolutePosition], @index-@absoluteIndex-1 AS [AbsoluteLength], @position AS [Position], @cursorPos-@position AS [Length], @capture AS [Value]\r\n\t\t\t\t\t\tSET @state = 0\r\n                        BREAK\r\n\t\t\t\t\tEND\r\n\t\t\t\t\tELSE -- IF @accept <> -1 \r\n\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\tSET @capture = @capture + @ch1\r\n\t\t\t\t\t\tIF @tch < 2048 SET @capture = @capture + @ch2\r\n\t\t\t\t\t\tSET @index = @index + 1\r\n\t\t\t\t\t\tIF @index >= @valueEnd \r\n\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\tSET @ch = -1\r\n\t\t\t\t\t\t\tSET @done = 1\r\n\t\t\t\t\t\tEND\r\n\t\t\t\t\t\tELSE -- IF @index >= @valueEnd \r\n\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\tSET @ch1 = SUBSTRING(@value,@index,1)\r\n\t\t\t\t\t\t\tSET @ch = UNICODE(@ch1)\r\n\t\t\t\t\t\t\tSET @tch = @ch - 0xd800\r\n\t\t\t\t\t\t\tIF @tch < 0 SET @tch = @tch + 2147483648\r\n\t\t\t\t\t\t\tIF @tch < 2048\r\n\t\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\t\tSET @ch = @ch * 1024\r\n\t\t\t\t\t\t\t\tSET @index = @index + 1\r\n\t\t\t\t\t\t\t\tIF @index >= @valueEnd RETURN -1\r\n\t\t\t\t\t\t\t\tSET @ch2 = SUBST");
            Response.Write("RING(@value,@index,1);\r\n\t\t\t\t\t\t\t\tSET @ch = @ch + UNICODE(@ch2) - 0x35fdc00\r\n\t\t\t\t\t\t\tEND\r\n\t\t\t\t\t\t\tSET @cursorPos = @cursorPos+1\r\n\t\t\t\t\t\tEND -- IF @index >= @valueEnd \r\n\t\t\t\t\tEND -- IF @accept <> -1 \r\n\t\t\t\t\tSET @state = 0\r\n\t\t\t\tEND -- WHILE ch<>-1\r\n\t\t\t\tSET @state = 0\r\n\t\t\t\tCONTINUE\r\n\t\t\tEND\r\n\t\t\tELSE\r\n\t\t\tBEGIN\r\n\t\t\tSET @len = @index-@absoluteIndex - 1\r\n\t\t\t-- HACK:\r\n\t\t\tIF @ch = -1 SET @cursorPos = @cursorPos + 1\r\n\t\t\tIF @len>0 INSERT INTO #Results SELECT @absoluteIndex AS [AbsolutePosition], @len AS [AbsoluteLength], @position AS [Position], @cursorPos-@position AS [Length], @capture AS [Value]\r\n\t\t\tEND\r\n\t\tEND -- IF @accept <> -1\r\n\t\tSET @index = @index + 1\r\n\t\tIF @index >= @valueEnd \r\n\t\tBEGIN\r\n\t\t\tSET @ch = -1\r\n\t\t\tSET @done = 1\r\n\t\tEND\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tSET @ch1 = SUBSTRING(@value,@index,1)\r\n\t\t\tSET @ch = UNICODE(@ch1)\r\n\t\t\tSET @tch = @ch - 0xd800\r\n\t\t\tIF @tch < 0 SET @tch = @tch + 2147483648\r\n\t\t\tIF @tch < 2048\r\n\t\t\tBEGIN\r\n\t\t\t\tSET @ch = @ch * 1024\r\n\t\t\t\tSET @index = @index + 1\r\n\t\t\t\tIF @index >= @valueEnd RETURN -1\r\n\t\t\t\tSET @ch2 =");
            Response.Write(" SUBSTRING(@value,@index,1);\r\n\t\t\t\tSET @ch = @ch + UNICODE(@ch2) - 0x35fdc00\r\n\t\t\tEND\r\n\t\t\tSET @cursorPos = @cursorPos+1\r\n\t\tEND\r\n\tEND\r\n\tSELECT * FROM #Results\r\n\tDROP TABLE #Results\r\nEND\r\nGO");

}
foreach(var rule in rules) {
            Response.Write("\r\nDROP PROCEDURE [dbo].[");
            Response.Write(codeclass);
            Response.Write("_Is");
            Response.Write(rule.Symbol);
            Response.Write("]\r\nGO\r\nCREATE PROCEDURE [dbo].[");
            Response.Write(codeclass);
            Response.Write("_Is");
            Response.Write(rule.Symbol);
            Response.Write("] @value NVARCHAR(1024) \r\nAS\r\nBEGIN\r\n\tDECLARE @result INT = 0\r\n\tEXEC @result = [dbo].[");
            Response.Write(codeclass);
            Response.Write("_Is] @value = @value, @symbolId = ");
            Response.Write(rule.Id);
            Response.Write("\r\n\tRETURN @result\r\nEND\r\nGO\r\nDROP PROCEDURE [dbo].[");
            Response.Write(codeclass);
            Response.Write("_TextIs");
            Response.Write(rule.Symbol);
            Response.Write("]\r\nGO\r\nCREATE PROCEDURE [dbo].[");
            Response.Write(codeclass);
            Response.Write("_TextIs");
            Response.Write(rule.Symbol);
            Response.Write("] @value NTEXT \r\nAS\r\nBEGIN\r\n\tDECLARE @result INT = 0\r\n\tEXEC @result = [dbo].[");
            Response.Write(codeclass);
            Response.Write("_TextIs] @value = @value, @symbolId = ");
            Response.Write(rule.Id);
            Response.Write("\r\n\tRETURN @result\r\nEND\r\nGO\r\nDROP PROCEDURE [dbo].[");
            Response.Write(codeclass);
            Response.Write("_Match");
            Response.Write(rule.Symbol);
            Response.Write("]\r\nGO\r\nCREATE PROCEDURE [dbo].[");
            Response.Write(codeclass);
            Response.Write("_Match");
            Response.Write(rule.Symbol);
            Response.Write("] @value NVARCHAR(1024), @position BIGINT = 0\r\nAS\r\nBEGIN\r\n\tEXEC [dbo].[");
            Response.Write(codeclass);
            Response.Write("_Match] @value = @value, @symbolId = ");
            Response.Write(rule.Id);
            Response.Write(", @position = @position\r\nEND\r\nGO\r\nDROP PROCEDURE [dbo].[");
            Response.Write(codeclass);
            Response.Write("_TextMatch");
            Response.Write(rule.Symbol);
            Response.Write("]\r\nGO\r\nCREATE PROCEDURE [dbo].[");
            Response.Write(codeclass);
            Response.Write("_TextMatch");
            Response.Write(rule.Symbol);
            Response.Write("] @value NTEXT, @position BIGINT = 0\r\nAS\r\nBEGIN\r\n\tEXEC [dbo].[");
            Response.Write(codeclass);
            Response.Write("_TextMatch] @value = @value, @symbolId = ");
            Response.Write(rule.Id);
            Response.Write(", @position = @position\r\nEND\r\nGO");

}
            Response.Write("\r\nTRUNCATE TABLE [dbo].[");
            Response.Write(codeclass);
            Response.Write("Symbol]\r\nTRUNCATE TABLE [dbo].[");
            Response.Write(codeclass);
            Response.Write("StateTransition]\r\nTRUNCATE TABLE [dbo].[");
            Response.Write(codeclass);
            Response.Write("State]\r\nGO");

Run("SqlTableMatcherFillerGenerator",Arguments,Response,0);
            Response.Write("\r\n");
            Response.Flush();
        }
    }
}
