<%
var rules = (IList<LexRule>)Arguments["rules"];
var ignoreCase = (bool)Arguments["ignorecase"];
var lineCounted = (bool)Arguments["lines"];
var inputFile = (string)Arguments["inputfile"];
var outputFile = (string)Arguments["outputfile"];
var stderr = (TextWriter)Arguments["stderr"];
var codeclass = (string)Arguments["codeclass"];
var codetoken = (string)Arguments["codetoken"];
var dot = (bool)Arguments["dot"];
var jpg = (bool)Arguments["jpg"];
var cwd = Path.GetDirectoryName(outputFile!=null?outputFile:inputFile);
var blockEnds = BuildBlockEnds(rules,inputFile,ignoreCase);
var symbolTable = BuildSymbolTable(rules);
var symbolFlags = BuildSymbolFlags(rules);
var lexer = BuildLexer(rules,inputFile,ignoreCase);
var dfa = ToDfaTable(lexer);
if(dot) {
    var opts = new F.FFA.DotGraphOptions();
    var fn = Path.Combine(cwd, codeclass + ".dot");
    stderr.WriteLine("Writing {0}...",fn);
    using(var sw=new StreamWriter(fn)) {
        lexer.WriteDotTo(sw,opts);
    }        
}
if(jpg) {
    var opts = new F.FFA.DotGraphOptions();
    var fn = Path.Combine(cwd, codeclass + ".jpg");
    stderr.WriteLine("Writing {0}...",fn);
    lexer.RenderToFile(fn,opts);
}
var dfaMap = GetDfaStateTransitionMap(dfa);
var isQ0reffed = IsQ0Reffed(dfa);
int si, sid;
int[][] blockEndDfas = new int[blockEnds.Length][];
//var hasBlockEnds = false;
for(var i = 0;i<blockEnds.Length;++i) {
    var be = blockEnds[i];
    if(be!=null) {
        blockEndDfas[i] = ToDfaTable(be);
       // hasBlockEnds = true;
    }
}%>
/// <summary>Indicates the #ERROR symbol id</summary>
public const int ERROR = -1;<%
foreach(var rule in rules) {%>
/// <summary>Indicates the <%=rule.Symbol%> symbol id</summary><%
if(0!=(symbolFlags[rule.Id]&1)){%>
/// <remarks>This symbol is hidden and will not be reported by the tokenizer</remarks><%
}%>
public const int <%=rule.Symbol%> = <%=rule.Id%>;<%
}
for(var k = 0;k<2;++k) { 
    bool reader = k==1;

    string curtype = reader ? "System.IO.TextReader":"System.Collections.Generic.IEnumerator<char>";
    string curname = reader ? "text":"cursor";
    string texttype = reader ? "System.IO.TextReader":"System.Collections.Generic.IEnumerable<char>";%>
/// <summary>Lexes tokens off of an input stream</summary>
/// <param name="text">The text to tokenize</param>
/// <param name="position">The starting position</param><% 
if(lineCounted) { %>
/// <param name="line">The starting line</param>
/// <param name="column">The starting column</param>
/// <param name="tabWidth">The tab width</param>
public static System.Collections.Generic.IEnumerable< <%=string.IsNullOrEmpty(codetoken)?"(long AbsolutePosition, int AbsoluteLength, long Position, int Length, int SymbolId, string Value"+(lineCounted?", int Line, int Column":"")+")":codetoken%>> Tokenize(<%=texttype%> text, long position = 0, int line = 1, int column = 1, int tabWidth = 4) {<% 
} else {%>
public static System.Collections.Generic.IEnumerable< <%=string.IsNullOrEmpty(codetoken)?"(long AbsolutePosition, int AbsoluteLength, long Position, int Length, int SymbolId, string Value"+(lineCounted?", int Line, int Column":"")+")":codetoken%>> Tokenize(<%=texttype%> text, long position = 0) {<%
}%>
    var sb = new System.Text.StringBuilder();
    int adv;
    long absoluteIndex;
    var errorIndex = 0L;
    var errorPos = 0L;
    var hasError = false;
    var absi=0L;<%
if(!reader) {%>
    var cursor = text.GetEnumerator();<%
} // if(!reader) ...%>
    var cursorPos = position;
    var ch = _ReadUtf32(<%=curname%>, out adv);<% 
if(lineCounted) {%>
    var lc = line;
    var cc = column;
    var errorLine = 0;
    var errorColumn = 0;<%
} // if(lineCounted)... %>
    while (ch != -1) {
        position = cursorPos;
        absoluteIndex = absi;<% 
if(lineCounted) {%>
        line = lc;
        column = cc;<%
} // if(lineCounted) ...
si = 0;
sid = 0;
while(si<dfa.Length) {
    var sacc = dfa[si++];
    if(sid==0) {
        if(isQ0reffed) {%>
    q0:<%} else {%>
    // q0:<%
        } // if(isQ0reffed)...
    } else {%>
    q<%=sid%>:<%
    } // if(sid==0)
    var tlen = dfa[si++];
    for(var j=0;j<tlen;++j) {
        var tto = dfa[si++];
        var rstart = si;
        var ranges = dfa;
        if(lineCounted) {
            var lclist = new List<int>(10);
            if (DfaRangesContains('\n',ranges,rstart)) {
                lclist.Add('\n');
                ranges = DfaExcludeFromRanges('\n',ranges,rstart);
                rstart = 0;        
            }
            if (DfaRangesContains('\r',ranges, rstart)) {
                lclist.Add('\r');
                ranges = DfaExcludeFromRanges('\r',ranges,rstart);
                rstart = 0; 
            }
            if (DfaRangesContains('\t',ranges, rstart)) {
                lclist.Add('\t');
                ranges = DfaExcludeFromRanges('\t',ranges,rstart);
                rstart = 0;
            }
            if(lclist.Contains('\t')) {%>
        if(ch == '\t') {
            sb.Append(unchecked((char)ch));
            cc = (((cc - 1) / tabWidth) + 1) * tabWidth + 1;
            ch = _ReadUtf32(<%=curname%>, out adv);
            absi+=adv;
            ++cursorPos;
            goto q<%=dfaMap[tto]%>;
        }<%
            }
            if (lclist.Contains('\r')) {%>
        if(ch == '\r') {
            sb.Append(unchecked((char)ch));
            cc = 1;
            ch = _ReadUtf32(<%=curname%>, out adv);
            absi+=adv;
            ++cursorPos;
            goto q<%=dfaMap[tto]%>;
        }<%
            }
            if (lclist.Contains('\n')) {%>
        if(ch == '\n') {
            sb.Append(unchecked((char)ch));
            ++lc;
            cc = 1;
            ch = _ReadUtf32(<%=curname%>, out adv);
            absi+=adv;
            ++cursorPos;
            goto q<%=dfaMap[tto]%>;
        }<%
            }
        }
        var exts = GetTransitionExtents(ranges,rstart);%>
        if(<%WriteCSRangeCharMatchTests(ranges, rstart, 2, Response);%>) {<%
        if(exts.Value<128) {%>
            sb.Append(unchecked((char)ch));<%} else {%>
            sb.Append(char.ConvertFromUtf32(ch));<%
        }
         if(lineCounted) {
            if(exts.Key>31) {%>
            ++cc;<%
            } else if(exts.Value>31) {%>
            if(ch > 31) ++cc;<%
            }
        }%>
            ch = _ReadUtf32(<%=curname%>, out adv);
            absi+=adv;
            ++cursorPos;
            goto q<%=dfaMap[tto]%>;
        }<%
        // skip the packed ranges
        var prlen = dfa[si++];
        si+=prlen*2;
    } // for .. tlen
    if(sid==0) { // if we didn't match on the first state and this is already an error condition we need to advance the cursor%>
            if(hasError) {
                sb.Append(char.ConvertFromUtf32(ch));
                ch = _ReadUtf32(<%=curname%>, out adv);
                <%
        if(lineCounted) {%>
                switch(ch) {
                case '\t':
                    cc = (((cc - 1) / tabWidth) + 1) * tabWidth + 1;
                    break;
                case '\r':
                    cc = 1;
                    break;
                case '\n':
                    cc = 1;
                    ++lc;
                    break;
                default:
                    if(ch>31) ++cc;
                    break;
                }
                absi+=adv;
                ++cursorPos;<%
        }%>
            }<%
        }
     
    if(sacc!=-1) { // accepting%>
            if(hasError)
            {
                var ai = (int)(absoluteIndex - errorIndex);<%
            if(string.IsNullOrEmpty(codetoken)) {%>
                yield return (AbsolutePosition: errorIndex, AbsoluteLength: ai, Position: errorPos, Length: (int)(position - errorPos), SymbolId: -1, Value: sb.ToString(0, ai)<%=lineCounted?", Line: errorLine, Column: errorColumn":""%>);<%
            } else {%>
                yield return new <%=codetoken%>(errorIndex, ai, errorPos, (int)(position - errorPos), -1, sb.ToString(0, ai)<%=lineCounted?", errorLine, errorColumn":""%>);<%
            }%>
                sb.Remove(0, ai);
                hasError = false;
            }<%
if(blockEnds[sacc]==null) {        
    if(0==(symbolFlags[sacc]&1)) {
        if(lineCounted) {
            if(!string.IsNullOrEmpty(codetoken)) {%>
            yield return new <%=codetoken%>(absoluteIndex, sb.Length, position, (int)(cursorPos-position), <%=symbolTable[sacc]%>, sb.ToString(), line, column);<%
            } else {%>
            yield return (AbsolutePosition: absoluteIndex, AbsoluteLength: sb.Length, Position: position, Length: (int)(cursorPos-position), SymbolId: <%=symbolTable[sacc]%>, Value: sb.ToString(), Line: line, Column: column);<%
            }                   
        } else { 
            if(!string.IsNullOrEmpty(codetoken)) {%>
           yield return new <%=codetoken%>(absoluteIndex, sb.Length, position, (int)(cursorPos-position), <%=symbolTable[sacc]%>, sb.ToString());<%
            } else {%>
           yield return (AbsolutePosition: absoluteIndex, AbsoluteLength: sb.Length, Position: position, Length: (int)(cursorPos-position), SymbolId: <%=symbolTable[sacc]%>, Value: sb.ToString());<%
            }
        }
    } // if(0==(symbolFlags[sacc]&1))... %>
            sb.Clear();
            continue;<%
} else // if(blockEnds[sacc]...
        {
            if(lineCounted) {%>
            if(_Tokenize<%=symbolTable[sacc]%>BlockEnd(<%=curname%>,sb, ref cursorPos, ref absi, ref lc, ref cc, tabWidth, ref ch)) {<%
                if(!string.IsNullOrEmpty(codetoken)) {%>
                yield return new <%=codetoken%>(absoluteIndex, sb.Length, position, (int)(cursorPos-position), <%=symbolTable[sacc]%>, sb.ToString(), line, column);<%
                } else {%>
                yield return (AbsolutePosition: absoluteIndex, AbsoluteLength: sb.Length, Position: position, Length: (int)(cursorPos-position), SymbolId: <%=symbolTable[sacc]%>, Value: sb.ToString(), Line: line, Column: column);<%
                }
            } else { // if(lineCounted)...%>
            if(_Tokenize<%=symbolTable[sacc]%>BlockEnd(<%=curname%>,sb, ref cursorPos, ref absi, ref ch)) {<%    
                if(!string.IsNullOrEmpty(codetoken)) {%>
                yield return new <%=codetoken%>(absoluteIndex, sb.Length, position, (int)(cursorPos-position), <%=symbolTable[sacc]%>, sb.ToString());<%
                } else {%>
                yield return (AbsolutePosition: absoluteIndex, AbsoluteLength: sb.Length, Position: position, Length: (int)(cursorPos-position), SymbolId: <%=symbolTable[sacc]%>, Value: sb.ToString());<%
                }
            } // if(lineCounted)...%>
                sb.Clear();
                continue;
            }<% // if(_Tokenize...
            if(lineCounted) {
                if(!string.IsNullOrEmpty(codetoken)) {%>
            yield return new <%=codetoken%>(absoluteIndex, sb.Length, position, (int)(cursorPos-position), ERROR, sb.ToString(), line, column);<%
                } else {%>
            yield return (AbsolutePosition: absoluteIndex, AbsoluteLength: sb.Length, Position: position, Length: (int)(cursorPos-position), SymbolId: ERROR, Value: sb.ToString(), Line: line, Column: column);<%
                }                   
            } else { 
                if(!string.IsNullOrEmpty(codetoken)) {%>
            yield return new <%=codetoken%>(absoluteIndex, sb.Length, position, (int)(cursorPos-position), ERROR, sb.ToString());<%
                } else {%>
            yield return (AbsolutePosition: absoluteIndex, AbsoluteLength: sb.Length, Position: position, Length: (int)(cursorPos-position), SymbolId: ERROR, Value: sb.ToString());<%
                }
            }%>
            sb.Clear();
            continue;<%
        } // if(blockEnds[sacc]...
    } else {// not accepting%>
        goto error;<%
    }
    ++sid; // we're on the next state now
} // while(si<dfa.Length) 
%>
    error:
        if(!hasError)
        {
            errorPos = position;
            errorIndex = absoluteIndex;<%
if(lineCounted) {%>
            errorColumn = column;
            errorLine = line;<%
}%>
        }
        hasError = true;    
    } <%// while(ch!=-1)...%>
    if(hasError && sb.Length>0)
    {<%
if(string.IsNullOrEmpty(codetoken)) {%>
        yield return (AbsolutePosition: errorIndex, AbsoluteLength: sb.Length, Position: errorPos, Length: (int)(position- errorPos +1 ), SymbolId: -1, Value: sb.ToString()<%=lineCounted?", Line: errorLine, Column: errorColumn":""%>);<%
} else {%>
        yield return new <%=codetoken%>(errorIndex, sb.Length, errorPos, (int)(popsition- errorPos+1), -1, sb.ToString()<%=lineCounted?", errorLine, errorColumn":""%>);<%
}%>
    }
} <% // Tokenize(...
foreach(var rule in rules) {
    var be = blockEnds[rule.Id];
    if(be!=null) {
        if(!lineCounted) {%>
static bool _Tokenize<%=rule.Symbol%>BlockEnd(<%=curtype%> <%=curname%>, System.Text.StringBuilder sb, ref long cursorPos, ref long absi, ref int ch) {<%
        } else { // if(!lineCounted) ...%>
static bool _Tokenize<%=rule.Symbol%>BlockEnd(<%=curtype%> <%=curname%>, System.Text.StringBuilder sb, ref long cursorPos, ref long absi, ref int lc, ref int cc, int tabWidth, ref int ch) {<%
        } // if(!lineCounted) ...%>
    int adv;<%
    if(lineCounted)
    {%>
    switch(ch) {
    case '\t':
        cc = (((cc - 1) / tabWidth) + 1) * tabWidth + 1;
        break;
    case '\r':
        cc = 1;
        break;
    case '\n':
        cc = 1;
        ++lc;
        break;
    default:
        if(ch>31) ++cc;
        break;
    }<%     
    } // if(lineCounted)...%>
    sb.Append(char.ConvertFromUtf32(ch));
    ch = _ReadUtf32(<%=curname%>, out adv);
    absi+=adv;
    ++cursorPos;
    while (ch != -1) {<% 
si = 0;
sid = 0;
var bedfa = blockEndDfas[rule.Id];
var bedfaMap = GetDfaStateTransitionMap(bedfa);
var beQ0reffed = IsQ0Reffed(bedfa);
while(si<bedfa.Length) {
    var sacc = bedfa[si++];
    if(sid==0) {
        if(beQ0reffed) {%>
    q0:<%} else {%>
    // q0:<%
        } // if(beQ0reffed)...
    } else {%>
    q<%=sid%>:<%
    } // if(sid==0)
    var tlen = bedfa[si++];
    for(var j=0;j<tlen;++j) {
        var tto = bedfa[si++];
        var rstart = si;
        var ranges = bedfa;
        if(lineCounted) {
            var lclist = new List<int>(10);
            if (DfaRangesContains('\n',ranges,rstart)) {
                lclist.Add('\n');
                ranges = DfaExcludeFromRanges('\n',ranges,rstart);
                rstart = 0;        
            }
            if (DfaRangesContains('\r',ranges, rstart)) {
                lclist.Add('\r');
                ranges = DfaExcludeFromRanges('\r',ranges,rstart);
                rstart = 0; 
            }
            if (DfaRangesContains('\t',ranges, rstart)) {
                lclist.Add('\t');
                ranges = DfaExcludeFromRanges('\t',ranges,rstart);
                rstart = 0;
            }
            if(lclist.Contains('\t')) {%>
        if(ch == '\t') {
            sb.Append(unchecked((char)ch));
            cc = (((cc - 1) / tabWidth) + 1) * tabWidth + 1;
            ch = _ReadUtf32(<%=curname%>, out adv);
            absi+=adv;
            ++cursorPos;
            goto q<%=bedfaMap[tto]%>;
        }<%
            }
            if (lclist.Contains('\r')) {%>
        if(ch == '\r') {
            sb.Append(unchecked((char)ch));
            cc = 1;
            ch = _ReadUtf32(<%=curname%>, out adv);
            absi+=adv;
            ++cursorPos;
            goto q<%=bedfaMap[tto]%>;
        }<%
            }
            if (lclist.Contains('\n')) {%>
        if(ch == '\n') {
            sb.Append(unchecked((char)ch));
            ++lc;
            cc = 1;
            ch = _ReadUtf32(<%=curname%>, out adv);
            absi+=adv;
            ++cursorPos;
            goto q<%=bedfaMap[tto]%>;
        }<%
            }
        }
        var exts = GetTransitionExtents(ranges,rstart);%>
        if(<%WriteCSRangeCharMatchTests(ranges, rstart, 2, Response);%>) {<%
        if(exts.Value<128) {%>
            sb.Append(unchecked((char)ch));<%
        } else {%>
            sb.Append(char.ConvertFromUtf32(ch));<%
        }
        if(lineCounted) {
            if(exts.Key>31) {%>
            ++cc;<%
            } else if(exts.Value>31) {%>
            if(ch > 31) ++cc;<%
            }
        }%>
            ch = _ReadUtf32(<%=curname%>, out adv);
            absi+=adv;
            ++cursorPos;
            goto q<%=bedfaMap[tto]%>;
        }<%
        // skip the packed ranges
        var prlen = bedfa[si++];
        si+=prlen*2;
    } // for .. tlen
    if(sacc!=-1) { // accepting%>
        return true;<%
    } else {// not accepting%>
        sb.Append(char.ConvertFromUtf32(ch));<%
        if(lineCounted)
{%>
        switch(ch) {
        case '\t':
            cc = (((cc - 1) / tabWidth) + 1) * tabWidth + 1;
            break;
        case '\r':
            cc = 1;
            break;
        case '\n':
            cc = 1;
            ++lc;
            break;
        default:
            if(ch>31) ++cc;
            break;
        }<%     
} // if(lineCounted)...%>
        ch = _ReadUtf32(<%=curname%>, out adv);
        absi+=adv;
        ++cursorPos;<%
        if(si<bedfa.Length) {%>
            continue;<%
        }
    }
    ++sid; // we're on the next state now
} // while(si<bedfa.Length) %>
    }
    return false;
}<%
    } // if(be!=null) ...
} // foreach(var rule in rules) ...%>
<%} // for(var k = 0;k<2;++k) ... %>
