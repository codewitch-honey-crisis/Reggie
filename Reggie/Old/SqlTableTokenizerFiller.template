<%
var rules = (IList<LexRule>)Arguments["rules"];
var ignoreCase = (bool)Arguments["ignorecase"];
var inputFile = (string)Arguments["inputfile"];
var outputFile = (string)Arguments["outputfile"];
var stderr = (TextWriter)Arguments["stderr"];
var codeclass = (string)Arguments["codeclass"];
var dot = (bool)Arguments["dot"];
var jpg = (bool)Arguments["jpg"];
var cwd = Path.GetDirectoryName(outputFile!=null?outputFile:inputFile);
var blockEnds = (F.FFA[])Arguments["blockEnds"];
var symbolFlags = (int[])Arguments["symbolFlags"];
var symbolTable = (string[])Arguments["symbolTable"];
var lexer = (F.FFA)Arguments["lexer"];
var dfa = ToDfaTable(lexer);
var dfaMap = GetDfaStateTransitionMap(dfa);
var beMap = new Dictionary<int,int>();
var bei = 0;
for(var i = 0;i<blockEnds.Length;++i) {
    var be = blockEnds[i];
    if(null!=be) {
        beMap.Add(i,bei);
        ++bei;
    } else
        beMap.Add(i,-1);
}
%>
TRUNCATE TABLE [dbo].[<%=codeclass%>Symbol]
TRUNCATE TABLE [dbo].[<%=codeclass%>StateTransition]
TRUNCATE TABLE [dbo].[<%=codeclass%>State]
GO
BEGIN TRANSACTION<%
var si = 0;
var sid = 0;
while(si<dfa.Length) {
        
    var acc = dfa[si++];
    var tlen = dfa[si++];
    %>
INSERT INTO [dbo].[<%=codeclass%>State] VALUES(<%=sid%>, <%=acc%>, -1)<%
    for(var i = 0;i<tlen;++i) {
        var tto = dfa[si++];
        var prlen = dfa[si++];
        for(var j = 0;j<prlen;++j) {
            // MSSQL doesn't have unsigned support, so all 
            // transitions are stored as an unsigned bigint
            var pmin = (long)dfa[si++];
            var pmax = (long)dfa[si++];
            if(pmin<0) pmin += 2147483648;
            if(pmax<0) pmax += 2147483648;%>
INSERT INTO [dbo].[<%=codeclass%>StateTransition] VALUES(<%=sid%>,-1,<%=dfaMap[tto]%>,<%=pmin%>,<%=pmax%>)<%
        }
    }
    ++sid;
}
foreach(var rule in rules) {%>
INSERT INTO [dbo].[<%=codeclass%>Symbol] VALUES(<%=rule.Id%>, <%=symbolFlags[rule.Id]%>, <%=beMap[rule.Id]%>, N'<%=rule.Symbol%>')<%
}
var bid = 0;

for(var sacc = 0;sacc<blockEnds.Length;++sacc) {
    var be = blockEnds[sacc];
    if(be!=null) {
  	    dfa = ToDfaTable(be);
        dfaMap = GetDfaStateTransitionMap(dfa);
    
        si = 0;
        sid = 0;
        while(si<dfa.Length) {
            var acc = dfa[si++];
            var tlen = dfa[si++];%>
INSERT INTO [dbo].[<%=codeclass%>State] VALUES(<%=sid%>, <%=acc==-1?-1:sacc%>,<%=bid%>)<%
            for(var i = 0;i<tlen;++i) {
                var tto = dfa[si++];
                var prlen = dfa[si++];
                for(var j = 0;j<prlen;++j) {
                    // MSSQL doesn't have unsigned support, so all 
                    // transitions are stored as an unsigned bigint
                    var pmin = (long)dfa[si++];
                    var pmax = (long)dfa[si++];
                    if(pmin<0) pmin += 2147483648;
                    if(pmax<0) pmax += 2147483648;%>
INSERT INTO [dbo].[<%=codeclass%>StateTransition] VALUES(<%=sid%>,<%=bid%>,<%=dfaMap[tto]%>,<%=pmin%>,<%=pmax%>)<%
                } // for(var j = 0;j<prlen;++j) ...
            } // for(var i = 0;i<tlen;++i) ...
            ++sid;
        } // while(si<dfa.Length) ...
        ++bid;
    } // if(be!=null) ...
} // for(var sacc = 0;sacc<blockEnds.Length;++sacc) ...
%>
COMMIT
GO
