<%
var rules = (IList<LexRule>)Arguments["rules"];
var ignoreCase = (bool)Arguments["ignorecase"];
var lineCounted = (bool)Arguments["lines"];
var inputFile = (string)Arguments["inputfile"];
var outputFile = (string)Arguments["outputfile"];
var stderr = (TextWriter)Arguments["stderr"];
var codeclass = (string)Arguments["codeclass"];
var codetoken = (string)Arguments["codetoken"];
var dot = (bool)Arguments["dot"];
var jpg = (bool)Arguments["jpg"];
var cwd = Path.GetDirectoryName(outputFile!=null?outputFile:inputFile);
var blockEnds = BuildBlockEnds(rules,inputFile,ignoreCase);
var symbolTable = BuildSymbolTable(rules);
var symbolFlags = BuildSymbolFlags(rules);
var lexer = BuildLexer(rules,inputFile,ignoreCase);
var dfa = ToDfaTable(lexer);
if(dot) {
    var opts = new F.FFA.DotGraphOptions();
    var fn = Path.Combine(cwd, codeclass + ".dot");
    stderr.WriteLine("Writing {0}...",fn);
    using(var sw=new StreamWriter(fn)) {
        lexer.WriteDotTo(sw,opts);
    }        
}
if(jpg) {
    var opts = new F.FFA.DotGraphOptions();
    var fn = Path.Combine(cwd, codeclass + ".jpg");
    stderr.WriteLine("Writing {0}...",fn);
    lexer.RenderToFile(fn,opts);
}
var dfaMap = GetDfaStateTransitionMap(dfa);
var isQ0reffed = IsQ0Reffed(dfa);
int si, sid;
int[][] blockEndDfas = new int[blockEnds.Length][];
//var hasBlockEnds = false;
for(var i = 0;i<blockEnds.Length;++i) {
    var be = blockEnds[i];
    if(be!=null) {
        blockEndDfas[i] = ToDfaTable(be);
       // hasBlockEnds = true;
    }
}
for(var k = 0;k<2;++k) { 
    var istext = k==1;
for(var sacc = 0;sacc<blockEnds.Length;++sacc) {
    var be = blockEnds[sacc];
    if(be!=null) {%>
DROP PROCEDURE [dbo].[<%=codeclass%>__<%=istext?"Text":""%>Tokenize<%=symbolTable[sacc]%>BlockEnd]
GO
CREATE PROCEDURE [dbo].[<%=codeclass%>__<%=istext?"Text":""%>Tokenize<%=symbolTable[sacc]%>BlockEnd] @value <%=istext?"NTEXT":"NVARCHAR(MAX)"%>, @ch BIGINT, @tch BIGINT, @ch1 NCHAR, @ch2 NCHAR, @cursorPos BIGINT, @index INT, @valueEnd INT, @capture NVARCHAR(MAX)<%=lineCounted?", @lc INT, @cc INT, @tabWidth INT":""%>, @newIndex INT OUTPUT, @newCursorPos BIGINT OUTPUT, @newCapture NVARCHAR(MAX) OUTPUT, @newCh BIGINT OUTPUT, @newTch BIGINT OUTPUT, @newCh1 NCHAR OUTPUT, @newCh2 NCHAR OUTPUT<%=lineCounted?", @newLC INT OUTPUT, @newCC INT OUTPUT":""%>
AS
BEGIN<%
    if(lineCounted)
    {%>
    SET @cc = CASE @ch WHEN 9 THEN (((@cc - 1) / @tabWidth) + 1) * @tabWidth + 1 WHEN 10 THEN 1 WHEN 13 THEN 1 ELSE @cc END
	SET @lc = CASE @ch WHEN 10 THEN @lc+1 ELSE @lc END
	IF @ch > 31 SET @cc = @cc + 1<%     
    } // if(lineCounted)...%>
    SET @capture = @capture + @ch1
    IF @tch < 2048 SET @capture = @capture + @ch2
    SET @index = @index + 1
	IF @index >= @valueEnd
	BEGIN
		SET @ch = -1
	END
	ELSE
	BEGIN
		SET @ch1 = SUBSTRING(@value,@index,1)
		SET @ch = UNICODE(@ch1)
		SET @tch = @ch - 0xd800
		IF @tch < 0 SET @tch = @tch + 2147483648
		IF @tch < 2048
		BEGIN
			SET @ch = @ch * 1024
			SET @index = @index + 1
			IF @index >= @valueEnd RETURN -1
			SET @ch2 = SUBSTRING(@value,@index,1)
			SET @ch = @ch + UNICODE(@ch2) - 0x35fdc00
		END
		SET @cursorPos = @cursorPos + 1
	END
    WHILE @ch <> -1
    BEGIN<% 
si = 0;
sid = 0;
var bedfa = ToDfaTable(be);
var bedfaMap = GetDfaStateTransitionMap(bedfa);
var beQ0reffed = IsQ0Reffed(bedfa);
while(si<bedfa.Length) {
    var acc = bedfa[si++];
    if(sid==0) {
        if(beQ0reffed) {%>
    q0:<%} else {%>
    -- q0:<%
        } // if(beQ0reffed)...
    } else {%>
    q<%=sid%>:<%
    } // if(sid==0)
    var tlen = bedfa[si++];
    for(var j=0;j<tlen;++j) {
        var tto = bedfa[si++];
        var rstart = si;
        var ranges = bedfa;
        if(lineCounted) {
            var lclist = new List<int>(10);
            if (DfaRangesContains('\n',ranges,rstart)) {
                lclist.Add('\n');
                ranges = DfaExcludeFromRanges('\n',ranges,rstart);
                rstart = 0;        
            }
            if (DfaRangesContains('\r',ranges, rstart)) {
                lclist.Add('\r');
                ranges = DfaExcludeFromRanges('\r',ranges,rstart);
                rstart = 0; 
            }
            if (DfaRangesContains('\t',ranges, rstart)) {
                lclist.Add('\t');
                ranges = DfaExcludeFromRanges('\t',ranges,rstart);
                rstart = 0;
            }
            if(lclist.Contains('\t')) {%>
        IF @ch = 9
        BEGIN
            SET @capture = @capture + @ch1
            SET @cc = (((@cc - 1) / @tabWidth) + 1) * @tabWidth + 1
            SET @index = @index + 1
			IF @index >= @valueEnd
			BEGIN
				SET @ch = -1
			END
			ELSE
			BEGIN
				SET @ch1 = SUBSTRING(@value,@index,1)
				SET @ch = UNICODE(@ch1)
				SET @tch = @ch - 0xd800
				IF @tch < 0 SET @tch = @tch + 2147483648
				IF @tch < 2048
				BEGIN
					SET @ch = @ch * 1024
					SET @index = @index + 1
					IF @index >= @valueEnd RETURN -1
					SET @ch2 = SUBSTRING(@value,@index,1)
					SET @ch = @ch + UNICODE(@ch2) - 0x35fdc00
				END
				SET @cursorPos = @cursorPos + 1
			END
            GOTO q<%=bedfaMap[tto]%>
        END<%
            }
            if (lclist.Contains('\n')) {%>
        IF @ch = 10
        BEGIN
            SET @capture = @capture + @ch1
            SET @cc = 1
            SET @lc = @lc + 1
            SET @index = @index + 1
			IF @index >= @valueEnd
			BEGIN
				SET @ch = -1
			END
			ELSE
			BEGIN
				SET @ch1 = SUBSTRING(@value,@index,1)
				SET @ch = UNICODE(@ch1)
				SET @tch = @ch - 0xd800
				IF @tch < 0 SET @tch = @tch + 2147483648
				IF @tch < 2048
				BEGIN
					SET @ch = @ch * 1024
					SET @index = @index + 1
					IF @index >= @valueEnd RETURN -1
					SET @ch2 = SUBSTRING(@value,@index,1)
					SET @ch = @ch + UNICODE(@ch2) - 0x35fdc00
				END
				SET @cursorPos = @cursorPos + 1
			END
            GOTO q<%=bedfaMap[tto]%>
        END<%
            }
            if (lclist.Contains('\r')) {%>
        IF @ch = 13
        BEGIN
            SET @capture = @capture + @ch1
            SET @cc = 1
            SET @index = @index + 1
			IF @index >= @valueEnd
			BEGIN
				SET @ch = -1
			END
			ELSE
			BEGIN
				SET @ch1 = SUBSTRING(@value,@index,1)
				SET @ch = UNICODE(@ch1)
				SET @tch = @ch - 0xd800
				IF @tch < 0 SET @tch = @tch + 2147483648
				IF @tch < 2048
				BEGIN
					SET @ch = @ch * 1024
					SET @index = @index + 1
					IF @index >= @valueEnd RETURN -1
					SET @ch2 = SUBSTRING(@value,@index,1)
					SET @ch = @ch + UNICODE(@ch2) - 0x35fdc00
				END
				SET @cursorPos = @cursorPos + 1
			END
            GOTO q<%=bedfaMap[tto]%>
        END<%
            }
        }
        var exts = GetTransitionExtents(ranges,rstart);%>
                IF <%WriteSqlRangeCharMatchTests(ranges, rstart, 2, Response);%>
        BEGIN
            SET @capture = @capture + @ch1<%
        if(exts.Value>127) {%>
            IF @tch < 2048 SET @capture = @capture + @ch2<%
        } 
         if(lineCounted) {
            if(exts.Key>31) {%>
            SET @cc = @cc + 1<%
            } else if(exts.Value>31) {%>
            IF @ch > 31 SET @cc = @cc + 1<%
            }
        }%>
            SET @index = @index + 1
			IF @index >= @valueEnd
			BEGIN
				SET @ch = -1
			END
			ELSE
			BEGIN
				SET @ch1 = SUBSTRING(@value,@index,1)
				SET @ch = UNICODE(@ch1)
				SET @tch = @ch - 0xd800
				IF @tch < 0 SET @tch = @tch + 2147483648
				IF @tch < 2048
				BEGIN
					SET @ch = @ch * 1024
					SET @index = @index + 1
					IF @index >= @valueEnd RETURN -1
					SET @ch2 = SUBSTRING(@value,@index,1)
					SET @ch = @ch + UNICODE(@ch2) - 0x35fdc00
				END
				SET @cursorPos = @cursorPos + 1
			END
            goto q<%=bedfaMap[tto]%>
        END -- IF {range test}<%
        // skip the packed ranges
        var prlen = bedfa[si++];
        si+=prlen*2;
    } // for .. tlen
    if(acc!=-1) { // accepting%>
        IF @ch = -1 SET @cursorPos = @cursorPos + 1
        SET @newCh = @ch
        SET @newTch = @tch
        SET @newCh1 = @ch1
        SET @newCh2 = @ch2
        SET @newCursorPos = @cursorPos
        SET @newIndex = @index
        SET @newCapture = @capture<%
        if(lineCounted) {%>
        SET @newLC = @lc
        SET @newCC = @cc<%
        }%>
        RETURN 1<%
    } else {// not accepting
        if(lineCounted) {%>
        SET @cc = CASE @ch WHEN 9 THEN (((@cc - 1) / @tabWidth) + 1) * @tabWidth + 1 WHEN 10 THEN 1 WHEN 13 THEN 1 ELSE @cc END
	    SET @lc = CASE @ch WHEN 10 THEN @lc+1 ELSE @lc END
	    IF @ch>31 SET @cc = @cc + 1<%     
        } // if(lineCounted)...%>
        SET @capture = @capture + @ch1
        IF @tch < 2048 SET @capture = @capture + @ch2
        SET @index = @index + 1
	    IF @index >= @valueEnd
	    BEGIN
		    SET @ch = -1
	    END
	    ELSE
	    BEGIN
		    SET @ch1 = SUBSTRING(@value,@index,1)
		    SET @ch = UNICODE(@ch1)
		    SET @tch = @ch - 0xd800
		    IF @tch < 0 SET @tch = @tch + 2147483648
		    IF @tch < 2048
		    BEGIN
			    SET @ch = @ch * 1024
			    SET @index = @index + 1
			    IF @index >= @valueEnd RETURN -1
			    SET @ch2 = SUBSTRING(@value,@index,1)
			    SET @ch = @ch + UNICODE(@ch2) - 0x35fdc00
		    END
		    SET @cursorPos = @cursorPos + 1
	    END<%
        if(si<bedfa.Length) {%>
        CONTINUE -- WHILE @ch <> -1<%
        }
    } // if(acc!=-1)
    ++sid; // we're on the next state now
} // while(si<bedfa.Length) %>
    END -- WHILE @ch <> -1
    IF @ch = -1 SET @cursorPos = @cursorPos + 1
    SET @newCh = @ch
    SET @newTch = @tch
    SET @newCh1 = @ch1
    SET @newCh2 = @ch2
    SET @newCursorPos = @cursorPos
    SET @newIndex = @index
    SET @newCapture = @capture<%
    if(lineCounted) {%>
    SET @newLC = @lc
    SET @newCC = @cc<%
    }%>
    RETURN 0
END
GO
<%
} // if(be!=null) ...
} // for(var sacc=0) ...%>
DROP PROCEDURE [dbo].[<%=codeclass%>_<%=istext?"Text":""%>Tokenize]
GO<%
    if(!lineCounted) {%>
CREATE PROCEDURE [dbo].[<%=codeclass%>_<%=istext?"Text":""%>Tokenize] @value <%=istext?"NTEXT":"NVARCHAR(MAX)"%>, @position BIGINT = 0<%
    } else {%>
CREATE PROCEDURE [dbo].[<%=codeclass%>_<%=istext?"Text":""%>Tokenize] @value <%=istext?"NTEXT":"NVARCHAR(MAX)"%>, @position BIGINT = 0, @line INT = 1, @column INT = 1, @tabWidth INT = 4<%
    }%>
AS
BEGIN
    DECLARE @valueEnd INT = DATALENGTH(@value)/2+1
	DECLARE @index INT = 1
	DECLARE @absoluteIndex BIGINT = 0
	DECLARE @ch BIGINT
	DECLARE @ch1 NCHAR
	DECLARE @ch2 NCHAR
	DECLARE @tch BIGINT
	DECLARE @state INT = 0
	DECLARE @toState INT = -1
	DECLARE @accept INT = -1
	DECLARE @cursorPos BIGINT = @position
	DECLARE @capture NVARCHAR(MAX) = N''
	DECLARE @tmp NVARCHAR(MAX) = N''
	DECLARE @blockId INT
	DECLARE @result INT = 0
	DECLARE @len INT = 0
	DECLARE @flags INT = 0
	DECLARE @matched INT = 0
    DECLARE @errorIndex BIGINT
    DECLARE @errorPos BIGINT
    DECLARE @hasError INT = 0
	DECLARE @ai INT
    DECLARE @newIndex INT
	DECLARE @newCursorPos INT
	DECLARE @newCapture NVARCHAR(MAX)
    DECLARE @newCh BIGINT
    DECLARE @newTch BIGINT
    DECLARE @newCh1 NCHAR
    DECLARE @newCh2 NCHAR<% 
    if(lineCounted) {%>
    DECLARE @lc INT = @line
    DECLARE @cc INT = @column
    DECLARE @newLC INT
    DECLARE @newCC INT
    DECLARE @errorLine INT
    DECLARE @errorColumn INT<%
    } // if(lineCounted) ... %>
    CREATE TABLE #Results (
	[AbsolutePosition] BIGINT NOT NULL,
	[AbsoluteLength] INT NOT NULL,
	[Position] BIGINT NOT NULL,
	[Length] INT NOT NULL,
    [SymbolId] INT NOT NULL,<%
    if(lineCounted) {%>
    [Value] NVARCHAR(MAX) NOT NULL,
    [Line] INT NOT NULL,
    [Column] INT NOT NULL<%
    } else {%>
    [Value] NVARCHAR(MAX) NOT NULL<%
    }%>)
	IF @index >= @valueEnd
	BEGIN 
		SET @ch = -1
	END
	ELSE
	BEGIN
		SET @ch1 = SUBSTRING(@value,@index,1)
		SET @ch = UNICODE(@ch1)
		SET @tch = @ch - 0xd800
		IF @tch < 0 SET @tch = @tch + 2147483648
		IF @tch < 2048
		BEGIN
			SET @ch = @ch * 1024
			SET @index = @index + 1
			IF @index >= @valueEnd RETURN -1
			SET @ch2 = SUBSTRING(@value,@index,1)
			SET @ch = @ch + UNICODE(@ch2) - 0x35fdc00
		END
	END
    SET @cursorPos = @position<%
if(lineCounted) {%>
	SET @lc = @line
	SET @cc = @column<%
}%>        
    WHILE @ch <> -1
	BEGIN
        SET @position = @cursorPos
        SET @absoluteIndex = @index-1<%
if(lineCounted) {%>
        SET @line = @lc
        SET @column = @cc<%
}     
si = 0;
sid = 0;
while(si<dfa.Length) {
    var sacc = dfa[si++];
    if(sid==0) {
        if(isQ0reffed) {%>
    q0:<%} else {%>
    -- q0:<%
        } // if(isQ0reffed)...
    } else {%>
    q<%=sid%>:<%
    } // if(sid==0)
    var tlen = dfa[si++];
    for(var j=0;j<tlen;++j) {
        var tto = dfa[si++];
        var rstart = si;
        var ranges = dfa;
        if(lineCounted) {
            var lclist = new List<int>(10);
            if (DfaRangesContains('\n',ranges,rstart)) {
                lclist.Add('\n');
                ranges = DfaExcludeFromRanges('\n',ranges,rstart);
                rstart = 0;        
            }
            if (DfaRangesContains('\r',ranges, rstart)) {
                lclist.Add('\r');
                ranges = DfaExcludeFromRanges('\r',ranges,rstart);
                rstart = 0; 
            }
            if (DfaRangesContains('\t',ranges, rstart)) {
                lclist.Add('\t');
                ranges = DfaExcludeFromRanges('\t',ranges,rstart);
                rstart = 0;
            }
            if(lclist.Contains('\t')) {%>
        IF @ch = 9
        BEGIN
            SET @capture = @capture + @ch1
            SET @cc = (((@cc - 1) / @tabWidth) + 1) * @tabWidth + 1
            SET @index = @index + 1
			IF @index >= @valueEnd
			BEGIN
				SET @ch = -1
			END
			ELSE
			BEGIN
				SET @ch1 = SUBSTRING(@value,@index,1)
				SET @ch = UNICODE(@ch1)
				SET @tch = @ch - 0xd800
				IF @tch < 0 SET @tch = @tch + 2147483648
				IF @tch < 2048
				BEGIN
					SET @ch = @ch * 1024
					SET @index = @index + 1
					IF @index >= @valueEnd RETURN -1
					SET @ch2 = SUBSTRING(@value,@index,1)
					SET @ch = @ch + UNICODE(@ch2) - 0x35fdc00
				END
				SET @cursorPos = @cursorPos + 1
			END
            GOTO q<%=dfaMap[tto]%>
        END<%
            }
            if (lclist.Contains('\n')) {%>
        IF @ch = 10
        BEGIN
            SET @capture = @capture + @ch1
            SET @cc = 1
            SET @lc = @lc + 1
            SET @index = @index + 1
			IF @index >= @valueEnd
			BEGIN
				SET @ch = -1
			END
			ELSE
			BEGIN
				SET @ch1 = SUBSTRING(@value,@index,1)
				SET @ch = UNICODE(@ch1)
				SET @tch = @ch - 0xd800
				IF @tch < 0 SET @tch = @tch + 2147483648
				IF @tch < 2048
				BEGIN
					SET @ch = @ch * 1024
					SET @index = @index + 1
					IF @index >= @valueEnd RETURN -1
					SET @ch2 = SUBSTRING(@value,@index,1)
					SET @ch = @ch + UNICODE(@ch2) - 0x35fdc00
				END
				SET @cursorPos = @cursorPos + 1
			END
            GOTO q<%=dfaMap[tto]%>
        END<%
            }
            if (lclist.Contains('\r')) {%>
        IF @ch = 13
        BEGIN
            SET @capture = @capture + @ch1
            SET @cc = 1
            SET @index = @index + 1
			IF @index >= @valueEnd
			BEGIN
				SET @ch = -1
			END
			ELSE
			BEGIN
				SET @ch1 = SUBSTRING(@value,@index,1)
				SET @ch = UNICODE(@ch1)
				SET @tch = @ch - 0xd800
				IF @tch < 0 SET @tch = @tch + 2147483648
				IF @tch < 2048
				BEGIN
					SET @ch = @ch * 1024
					SET @index = @index + 1
					IF @index >= @valueEnd RETURN -1
					SET @ch2 = SUBSTRING(@value,@index,1)
					SET @ch = @ch + UNICODE(@ch2) - 0x35fdc00
				END
				SET @cursorPos = @cursorPos + 1
			END
            GOTO q<%=dfaMap[tto]%>
        END<%
            }
        }
        var exts = GetTransitionExtents(ranges,rstart);%>
        IF <%WriteSqlRangeCharMatchTests(ranges, rstart, 2, Response);%>
        BEGIN
            SET @capture = @capture + @ch1<%
        if(exts.Value>127) {%>
            IF @tch < 2048 SET @capture = @capture + @ch2<%
        } 
         if(lineCounted) {
            if(exts.Key>31) {%>
            SET @cc = @cc + 1<%
            } else if(exts.Value>31) {%>
            IF @ch > 31 SET @cc = @cc + 1<%
            }
        }%>
            SET @index = @index + 1
			IF @index >= @valueEnd
			BEGIN
				SET @ch = -1
			END
			ELSE
			BEGIN
				SET @ch1 = SUBSTRING(@value,@index,1)
				SET @ch = UNICODE(@ch1)
				SET @tch = @ch - 0xd800
				IF @tch < 0 SET @tch = @tch + 2147483648
				IF @tch < 2048
				BEGIN
					SET @ch = @ch * 1024
					SET @index = @index + 1
					IF @index >= @valueEnd RETURN -1
					SET @ch2 = SUBSTRING(@value,@index,1)
					SET @ch = @ch + UNICODE(@ch2) - 0x35fdc00
				END
				SET @cursorPos = @cursorPos + 1
			END
            goto q<%=dfaMap[tto]%>
        END -- IF {range test}<%
        // skip the packed ranges
        var prlen = dfa[si++];
        si+=prlen*2;
    } // for .. tlen
    if(sacc!=-1) { // accepting%>
        IF @hasError = 1
        BEGIN
            SET @hasError = 0
            SET @ai = CAST((@absoluteIndex - @errorIndex) AS INT)
			SET @tmp = SUBSTRING(@capture,1,@ai)
			SET @capture = SUBSTRING(@capture,@ai+1,(DATALENGTH(@capture)/2)-(@ai+1))<%
        if(lineCounted) {%>
            INSERT INTO #Results VALUES(@errorIndex, @ai, @errorPos, CAST((@position - @errorPos) AS INT), -1, @tmp, @errorLine, @errorColumn)<%
        } else {%>
            INSERT INTO #Results VALUES(@errorIndex, @ai, @errorPos, CAST((@position - @errorPos) AS INT), -1, @tmp)<%
        }%>                
        END<%
        if(blockEnds[sacc]==null) {%>       
        IF @ch = -1 SET @cursorPos = @cursorPos + 1<%
            if(0==(symbolFlags[sacc]&1)) {%>
		SET @len = @index-@absoluteIndex-1<%
                if(lineCounted) {%>
        IF @len>0 INSERT INTO #Results SELECT @absoluteIndex AS [AbsolutePosition], @len AS [AbsoluteLength], @position AS [Position], CAST((@cursorPos-@position) AS INT) AS [Length], @accept AS [SymbolId], @capture AS [Value], @line AS [Line], @column AS [Column]<%
		        } else { %>
        IF @len>0 INSERT INTO #Results SELECT @absoluteIndex AS [AbsolutePosition], @len AS [AbsoluteLength], @position AS [Position], CAST((@cursorPos-@position) AS INT) AS [Length], @accept AS [SymbolId], @capture AS [Value]<%
		        }
            }%>
		SET @capture = N''
		CONTINUE -- WHILE @ch <> -1<%
        } else { // if(blockEnds[sacc]==null) ... {%>
        EXEC @len = [dbo].[<%=codeclass%>__<%=istext?"Text":""%>Tokenize<%=symbolTable[sacc]%>BlockEnd] @value = @value, @ch = @ch,  @tch = @tch, @ch1 = @ch1, @ch2 = @ch2, @cursorPos = @cursorPos, @index = @index, @valueEnd = @valueEnd, @capture = @capture<%=lineCounted?", @lc = @lc, @cc = @cc, @tabwidth = @tabWidth":""%>, @newIndex = @newIndex OUTPUT, @newCursorPos = @newCursorPos OUTPUT, @newCapture = @newCapture OUTPUT, @newCh = @newCh OUTPUT, @newTch = @newTch OUTPUT, @newCh1 = @newCh1 OUTPUT, @newCh2 = @newCh2 OUTPUT<%=lineCounted?", @newLC = @newLC OUTPUT, @newCC = @newCC OUTPUT":""%>
        SET @index = @newIndex
		SET @cursorPos = @newCursorPos
		SET @capture = @newCapture
        SET @ch = @newCh
        SET @tch = @newTch
        SET @ch1 = @newCh1
        SET @ch2 = @newCh2<%
            if(lineCounted) {%>
        SET @lc = @newLC
        SET @cc = @newCC<%
            }%>
        IF @len = 1 INSERT INTO #Results SELECT @absoluteIndex AS [AbsolutePosition], CAST((@index-@absoluteIndex-1) AS INT) AS [AbsoluteLength], @position AS [Position], CAST((@cursorPos-@position) AS INT) AS [Length], <%=sacc%> AS [SymbolId], @capture AS [Value]<%=lineCounted?", @line AS [Line], @column AS [Column]":""%>
        CONTINUE<%
        } // if(blockEnds[sacc]==null) ...
    } else {// if(sacc!=-1) ...%>
        GOTO error<%
    } // if(sacc!=-1) ...
    ++sid; // we're on the next state now
} // while(si<dfa.Length) ...%> 
    error:
        IF @hasError = 1
        BEGIN
            SET @errorPos = @position
            SET @errorIndex = @absoluteIndex<%
if(lineCounted) {%>
            SET @errorColumn = @column
            SET @errorLine = @line<%
}%>
        END
        SET @hasError = 1    
    END -- WHILE ch <> -1 
    SET @len = DATALENGTH(@capture)/2
    IF @hasError = 1 AND @len <> 0 INSERT INTO #Results SELECT @errorIndex AS [AbsolutePosition], @len AS [AbsoluteLength], @errorPos AS [Position], CAST((@position-@errorPos+1) AS INT) AS [Length], -1 AS [SymbolId], @capture AS [Value]<%=lineCounted?", @errorLine AS [Line], @errorColumn AS [Column]":""%>
    SELECT * FROM #Results
    DROP TABLE #Results
END -- Tokenize ...
GO<%
} // for(var k = 0;k<2;++k) ... 
%>
