<%
var rules = (IList<LexRule>)Arguments["rules"];
var ignoreCase = (bool)Arguments["ignorecase"];
var inputFile = (string)Arguments["inputfile"];
var outputFile = (string)Arguments["outputfile"];
var stderr = (TextWriter)Arguments["stderr"];
var codeclass = (string)Arguments["codeclass"];
var dot = (bool)Arguments["dot"];
var jpg = (bool)Arguments["jpg"];
var cwd = Path.GetDirectoryName(outputFile!=null?outputFile:inputFile);
var blockEnds = BuildBlockEnds(rules,inputFile,ignoreCase);
var symbolFlags = BuildSymbolFlags(rules);
%>
TRUNCATE TABLE [dbo].[<%=codeclass%>Symbol]
TRUNCATE TABLE [dbo].[<%=codeclass%>StateTransition]
TRUNCATE TABLE [dbo].[<%=codeclass%>State]
GO
BEGIN TRANSACTION<%
foreach(var rule in rules) {
	var fa = ParseToFA(rule,inputFile,ignoreCase);
	var dfa = ToDfaTable(fa);
    var dfaMap = GetDfaStateTransitionMap(dfa);
    if(dot) {
        var opts = new F.FFA.DotGraphOptions();
        opts.HideAcceptSymbolIds = true;
        var fn = Path.Combine(cwd, rule.Symbol + ".dot");
        stderr.WriteLine("Writing {0}...",fn);
        using(var sw=new StreamWriter(fn)) {
            fa.WriteDotTo(sw,opts);
        }        
    }
    if(jpg) {
        var opts = new F.FFA.DotGraphOptions();
        opts.HideAcceptSymbolIds = true;
        var fn = Path.Combine(cwd, rule.Symbol + ".jpg");
        stderr.WriteLine("Writing {0}...",fn);
        try {
            fa.RenderToFile(fn,opts);
        }  
        catch {}
    }
    var si = 0;
    var sid = 0;
    while(si<dfa.Length) {
        
        var acc = dfa[si++];
        var tlen = dfa[si++];%>
INSERT INTO [dbo].[<%=codeclass%>State] VALUES(<%=rule.Id%>, <%=sid%>, <%=acc==-1?0:1%>, -1)<%
        for(var i = 0;i<tlen;++i) {
            var tto = dfa[si++];
            var prlen = dfa[si++];
            for(var j = 0;j<prlen;++j) {
                // MSSQL doesn't have unsigned support, so all 
                // transitions are stored as an unsigned bigint
                var pmin = (long)dfa[si++];
                var pmax = (long)dfa[si++];
                if(pmin<0) pmin += 2147483648;
                if(pmax<0) pmax += 2147483648;%>
INSERT INTO [dbo].[<%=codeclass%>StateTransition] VALUES(<%=rule.Id%>, <%=sid%>,-1,<%=dfaMap[tto]%>,<%=pmin%>,<%=pmax%>)<%
            }
        }
        ++sid;
    }
%>
INSERT INTO [dbo].[<%=codeclass%>Symbol] VALUES(<%=rule.Id%>, <%=symbolFlags[rule.Id]%>,N'<%=rule.Symbol%>')<%
}
var bid = 0;

for(var sacc = 0;sacc<blockEnds.Length;++sacc) {
    var be = blockEnds[sacc];
    if(be!=null) {
  	var dfa = ToDfaTable(be);
    var dfaMap = GetDfaStateTransitionMap(dfa);
    
    var si = 0;
    var sid = 0;
    while(si<dfa.Length) {
        var acc = dfa[si++];
        var tlen = dfa[si++];%>
INSERT INTO [dbo].[<%=codeclass%>State] VALUES(<%=sacc%>, <%=sid%>, <%=acc==-1?0:1%>,<%=bid%>)<%
        for(var i = 0;i<tlen;++i) {
            var tto = dfa[si++];
            var prlen = dfa[si++];
            for(var j = 0;j<prlen;++j) {
                // MSSQL doesn't have unsigned support, so all 
                // transitions are stored as an unsigned bigint
                var pmin = (long)dfa[si++];
                var pmax = (long)dfa[si++];
                if(pmin<0) pmin += 2147483648;
                if(pmax<0) pmax += 2147483648;%>
INSERT INTO [dbo].[<%=codeclass%>StateTransition] VALUES(<%=sacc%>,<%=sid%>,<%=bid%>,<%=dfaMap[tto]%>,<%=pmin%>,<%=pmax%>)<%
                }
            }
            ++sid;
        }   
        ++bid;
    }
}
%>
COMMIT
GO
