<%
var w = new Reggie.IndentedTextWriter(Response);
var codenamespace = (string)Arguments["codenamespace"];
var tables = (bool)Arguments["tables"];
var lexer = (bool)Arguments["lexer"];
var outputfile = (string)Arguments["outputfile"];
var inputfile = (string)Arguments["inputfile"];
var input = (TextReader)Arguments["input"];
var codeclass = (string)Arguments["codeclass"];
if(string.IsNullOrEmpty(codeclass)) {
    if(!string.IsNullOrEmpty(outputfile)) {
        codeclass = Path.GetFileNameWithoutExtension(outputfile);
    } else {
        codeclass = Path.GetFileNameWithoutExtension(inputfile);
    }
}
Arguments["codeclass"]=codeclass;
var rules = new List<Reggie.LexRule>();
string line;
while (null != (line = input.ReadLine()))
{
    var lc = LC.LexContext.Create(line);
    lc.TrySkipCCommentsAndWhiteSpace();
    if (-1 != lc.Current)
        rules.Add(Reggie.LexRule.Parse(lc));
}
Reggie.LexRule.FillRuleIds(rules);
Arguments["rules"]=rules;
if(!string.IsNullOrEmpty(codenamespace)) {%>
namespace <%=codenamespace%> {
    ///<summary>A class generated by <%=Program.Name%> for running <%=lexer?"regular expressions":"a lexer"%>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("<%=Program.Name%>", "<%=Program.Version.ToString()%>")]
    partial class <%=codeclass%> {

    <%
	Run("CSharpCommonGenerator",Arguments,Response,2);%>
<%
    if(tables) {
        if(lexer) {%>
<%
            Run("CSharpTableTokenizerGenerator",Arguments,Response,2);
        } else { // if(lexer) ...%>
<%
            Run("CSharpTableMatcherGenerator",Arguments,Response,2);
        } // if(lexer) ...
    } else { // if(tables) ...
        if(lexer) {%>
<%
            Run("CSharpCompiledTokenizerGenerator",Arguments,Response,2);
        } else { // if(lexer) ...%>
<%
            Run("CSharpCompiledMatcherGenerator",Arguments,Response,2);
        } // if(lexer) ...
    } // if(tables) ... %>
    }<% // partial class ...
%>
}<% 
} else { // if(!string.IsNullOrEmpty(codenamespace)) ... %>
///<summary>A class generated by Reggie for running <%=lexer?"regular expressions":"a lexer"%>
[System.CodeDom.Compiler.GeneratedCodeAttribute("<%=Program.Name%>", "<%=Program.Version.ToString()%>")]
partial class <%=codeclass%> {<%
	Run("CSharpCommonGenerator",Arguments,Response,1);
    if(tables) {
        if(lexer) {
            Run("CSharpTableTokenizerGenerator",Arguments,Response,1);
        } else {
            Run("CSharpTableMatcherGenerator",Arguments,Response,1);
        }
    } else { // if(tables) ...
        if(lexer) {
            Run("CSharpCompiledTokenizerGenerator",Arguments,Response,1);
        } else { // if(lexer) ...
            Run("CSharpCompiledMatcherGenerator",Arguments,Response,1);
        } // if(lexer) ...
   } // if(tables) %>
} <%// partial class ...
} // if(!string.IsNullOrEmpty(codenamespace)) ...%>
